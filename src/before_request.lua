---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zhangke200377.
--- DateTime: 2023/7/31 上午9:05
---

local config = require("utils.config")
local route = require("utils.route")
local request = require("utils.request")

local current_route = route.route(request.get_path());

if not current_route then
    current_route = {
        cache = false,
        auth = false
    }
end

ngx.header["X-APPLICATION"] = "LUCACHER/1.0"

-- auth

local need_auth = false

if type(current_route.auth) == "table" then
    need_auth = current_route.auth.enable
elseif type(current_route.auth) == "boolean" then
    need_auth = current_route.auth
end

if need_auth then
    local auth_function = config.get("AUTH_METHOD", function() return true end)

    if type(current_route.auth) == "table" then
        auth_function = (current_route.auth.method or auth_function)
    end

    local auth_result = auth_function()

    if not auth_result then
        local json = require("cjson.safe")

        ngx.status = ngx.HTTP_FORBIDDEN

        ngx.header["X-CACHE-STATUS"] = "BYPASS"
        ngx.header["Content-Type"] = "application/json"
        ngx.say(json.encode({
            code = ngx.HTTP_FORBIDDEN,
            msg = "Token Not Found Or Invalid",
            data = {}
        }))

        ngx.exit(ngx.HTTP_FORBIDDEN)
    end
end

-- only cache if http method is get
if string.lower(ngx.var.request_method) ~= "get" then
    ngx.header["X-CACHE-STATUS"] = "BYPASS"
    return
end

-- cache
local cache = require("utils.cache")

local cache_key = request.get_key()
local cache_expire = config.get("CACHE_EXPIRE", 2 * 60)

if type(current_route.cache) == "table" then
    cache_expire = (current_route.cache.expire or cache_expire)
end

local value, err = cache.get(cache_key, cache_expire)

if value then
    local json = require("cjson.safe")

    local cache_content = json.decode(value)

    if cache_content then
        ngx.status = cache_content.code

        for k, v in pairs(cache_content.header) do
            ngx.header[k] = v
        end

        ngx.header["X-CACHE-STATUS"] = "HIT"

        ngx.say(cache_content.content)
        ngx.exit(ngx.HTTP_OK)
    end
end

local resty_lock = require("resty.lock")

local cache_lock, err = resty_lock:new(config.get("CACHE_LOCK_DICT", "lucacher_cache_lock_dict"))

if cache_lock then
    cache_lock.lock(cache_key)
    ngx.ctx.cache_lock = cache_lock
end

ngx.ctx.route = current_route
ngx.ctx.cache_key = cache_key

ngx.header["X-CACHE-STATUS"] = "DYNAMIC"
